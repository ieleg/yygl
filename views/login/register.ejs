
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <!-- <meta name="viewport" content="width=device-width, initial-scale=1.0"> -->
  <link rel="stylesheet" href="/css/login.css">
  <title>Document</title>
</head>
<body>
  <div class="container" >
    <form class="login-form layui-form" action='/rl/register' method='POST' autocomplete="off" id="register">
      <div class="text">注册</div>
      <div class="form-item">
        <input type="username" placeholder="用户名" name='username'>
        <input type="password" placeholder="密码" name='password'>
        <input type="password" placeholder="确认密码" name='passwordR'>

      </div>
      <input  class="btn" type='submit' value="注册"></input >
      <div class="btn-back"></div>
    </form>
  </div>


  <script>
    // 表单验证规则
    let a=123;
    let register = document.getElementById('register');
    // register.onsubmit = function(){
    //   if(register.username.value == ''){
    //     alert('用户名不能为空')
    //     return false
    //   }
    //   if(register.password.value == ''){
    //     alert('密码不能为空')
    //     return false
    //   }
    //   if(register.password.value !== register.passwordR.value){
    //     alert('两次输入密码不一致')
    //     return false
    //   }
      
    // }
    // 策略模式重构
    let strategies = {
      isEmpty(value ,errMsg){
        if(value == ''){
          return errMsg
        }
      },
      minLength(value,length,errMsg){
        if(value.length < length){
          return errMsg
        }
      },
      doubleCheck(value1,value2,errMsg){
        if(value1 !== value2){
          return errMsg
        }
      }
    }
    let validataFunc = function(){
      let validator = new Validator();

      validator.add(register.username,'isEmpty','用户名不能为空')
      validator.add(register.password,'isEmpty','密码不能为空')
      validator.add(register.password,'doubleCheck:register.passwordR.value','两次密码输入不对')
      
      let errMsg = validator.start();
      return errMsg
    }
    register.onsubmit = function(){
      let errMsg = validataFunc();
      if(errMsg){
        alert(errMsg)
        return false
      }
    }
    const Validator = function() {
      this.cache = [];
    }
    Validator.prototype.add = function(dom,rule,errMsg){
      let arr = rule.split(':');
      this.cache.push(function(){
        let strategy = arr.shift();
        arr.unshift(dom.value);
        arr.push(errMsg);
        return strategies[strategy].apply(dom,arr);
      })
    }
    Validator.prototype.start = function(){
      for(let i = 0 ,validataFunc ; validataFunc = this.cache[i++];){
        let msg = validataFunc();
        if(msg){
          return msg
        }
      }
    }

  </script>
</body>
</html>